#!/bin/sh
#File: /usr/bin/rrm_nr
#Forked from: https://github.com/simonyiszk/openwrt-rrm-nr-distributor

NAME=rrm_nr

function get_valid_wifi_iface_list() {
	function is_802dot11k_nr_enabled() {
		local uci_option_name="$( uci show wireless | grep ifname=\'${1:?Missing: Wi-Fi interface name}\' | sed "s/wireless.\(.*\).ifname.*/\1/" )"

		local ieee80211k="$( uci -q show wireless.$uci_option_name.ieee80211k | cut -d\' -f2 )"
		local rrm_neighbor_report="$( uci -q show wireless.$uci_option_name.rrm_neighbor_report | cut -d\' -f2 )"

		( [ "$ieee80211k" == "1" ] && ([ -z "$rrm_neighbor_report" ] || [ "$rrm_neighbor_report" == "1" ]) ) && return 0 || return 1
	}

	local wifi_iface
	for wifi_iface in $( ubus list hostapd.* | awk -F. '{ print $2; }' ); do
		is_802dot11k_nr_enabled "$wifi_iface" && echo $wifi_iface
	done
}

function get_ssid() {
	iwinfo ${1:?Missing: Wi-Fi iface} info | grep ESSID | cut -d\" -f2
}

function _do_updates() {
	ubus call umdns update
	sleep 5

	local wifi_iface wifi_iface_list="$( get_valid_wifi_iface_list )"
	for wifi_iface in $wifi_iface_list; do
		local ssid="$( get_ssid "$wifi_iface" )"
	
		function get_internal_rrm_nr_lists() {
			local other_wifi_iface
			for other_wifi_iface in $wifi_iface_list; do
				([ "$wifi_iface" == "$other_wifi_iface" ] || [ "$ssid" != "$( get_ssid "$other_wifi_iface" )" ]) && continue
				ubus call hostapd.${other_wifi_iface} rrm_nr_get_own | jsonfilter -e '$.value'
			done
		}

		function get_external_rrm_nr_lists() {
			function create_wlan_keys_string() {
				local string current=0 count=${1:?Missing: Number of keys}

				while [ $current -lt $count ]; do
					string="$string,\"wlan$current\""
					current=$(( current + 1 ))
				done

				printf "${string:1}"
			}
			local router json_root_string="$( ubus call umdns browse | sed "s/\"txt\": \"\(\([[:alnum:]]\|_\)\+\)=/\"\1\": \"/" | jsonfilter -e '@["_rrm_nr._udp"]' )"
			[ -z "$json_root_string" ] && return 0
			eval "$( jsonfilter -s "$json_root_string" -e 'JSON_ROOT_KEYS=$' )"
			for router in $JSON_ROOT_KEYS; do
				local json_selector="$( create_wlan_keys_string "$( jsonfilter -s "$json_root_string" -e "@['$router'].wlan_length" )" )"
				jsonfilter -s "$json_root_string" -e "@['$router'][$json_selector]" | grep "\"${ssid}\""
			done
			unset JSON_ROOT_KEYS
		}

		local all_rrm_nr="$( ( get_internal_rrm_nr_lists ; get_external_rrm_nr_lists ) | sort -u | tr '\n' ',' | sed "s/,$//" )"
		local old_all_rrm_nr="$( ubus call hostapd.$wifi_iface rrm_nr_list | jsonfilter -e '@.list[@]' | sort -u | tr '\n' ',' | sed "s/,$//" )"
		if [ "$old_all_rrm_nr" == "$all_rrm_nr" ]; then
			# Setting a new list will cause the wifi to quickly cycle, which we do not want every 60s
			continue
		fi
		local all_rrm_nr_length=$( printf "$all_rrm_nr" | grep -o "$ssid" | wc -l )
		ubus call hostapd.${wifi_iface} rrm_nr_set "{ \"list\": [$all_rrm_nr] }"
		logger -t "$NAME" -p daemon.info "Updated rrm_nr_list[$all_rrm_nr_length] of $wifi_iface: $all_rrm_nr"
	done

}

while true; do
	_do_updates

	sleep 60
done

exit 0
