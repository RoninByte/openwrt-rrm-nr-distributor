#!/bin/sh /etc/rc.common
# shellcheck disable=3043,2317,2046,2034,2154,3057
#Forked from: https://github.com/simonyiszk/openwrt-rrm-nr-distributor
NAME=rrm_nr
USE_PROCD=1
START=99

count_enabled_wifi_interfaces() {
  local up_configured
  up_configured=0

  is_wifi_interface_enabled() {
    local config disabled mode
    config="$1"
    config_get disabled "$config" disabled 0
    config_get mode "$config" mode

    [ "$disabled" -eq 0 ] && [ "$mode" = "ap" ] && up_configured=$((up_configured + 1))
  }

  config_load wireless
  config_foreach is_wifi_interface_enabled wifi-iface

  echo "$up_configured"
}

abort_when_no_enabled_wifi_interfaces() {
  [ $(count_enabled_wifi_interfaces) -gt 0 ] && return 0
  logger -t "${NAME}" -pdaemon.error "No enabled Wi-Fi interfaces found"
  exit 1
}

wait_until_all_enabled_wifi_interfaces_are_up() {
  are_all_wireless_interfaces_up() {
    local num_up
    num_up=$(ubus list hostapd.* | wc -l)
    count=$(count_enabled_wifi_interfaces)
    [ "$(count_enabled_wifi_interfaces)" -eq "$num_up" ] && return 0
  }

  local max=6 n=1
  while [ $n -le $max ] && ! are_all_wireless_interfaces_up; do
    logger -t "${NAME}" -pdaemon.info "Waiting for all Wi-Fi interfaces to initialize (Run: $n/$max)"
    n=$((n + 1))
    sleep 30
  done

  [ $max -eq $n ] && logger -t "${NAME}" -pdaemon.error "Aborted due to long waiting time; check all hanging enabled Wi-Fi interfaces"
}

custom_procd_add_mdns() {
  procd_open_data
  json_add_object "mdns"

  create_header() {
    #https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?search=5247
    local service="$NAME" protocol="udp" port="5247"
    json_add_object "${service}_$port"
    json_add_string "service" "_$service._$protocol.local"
    json_add_int port "$port"
  }
  create_header

  local all_rrm_nr
  create_own_rrm_nr_list() {

    is_802dot11k_nr_enabled() {
      load_sections() {
        local config ssid device _ssid _device ieee80211k
        config="$1"
        ssid="$2"
        device="${3/phy/radio}"
        config_get _ssid "$config" ssid
        config_get _device "$config" device
        config_get disabled "$config" disabled 0
        config_get ieee80211k "$config" ieee80211k 0

        [ "$disabled" = "0" ] && [ "$ieee80211k" = "1" ] && [ "$ssid" = "$_ssid" ] && [ "$device" = "$_device" ] && is_802dot11k_nr_enabled=true
      }

      ssid=$1
      phy=$2
      is_802dot11k_nr_enabled=false
      config_load wireless
      config_foreach load_sections wifi-iface "$ssid" "$phy"
      $is_802dot11k_nr_enabled
    }

    json_add_array txt
    local iface length=0
    for iface in $(ubus list hostapd.*); do
      eval $(ubus -v call $iface get_status | jsonfilter -e ssid='$.ssid' -e phy='$.phy')
      if is_802dot11k_nr_enabled $ssid $phy; then
        rrm_nr="$(ubus call "${iface}" rrm_nr_get_own | jsonfilter -e '$.value')"
        json_add_string "" "wlan$length=$rrm_nr"
        length=$((length + 1))
        all_rrm_nr="$all_rrm_nr, $rrm_nr"
      # else
        # logger -t "${NAME}" -pdaemon.warn "Skipped Wi-Fi interface without 802.11k neighbor reporting enabled: ${iface#hostapd.}"
      fi
    done
    json_add_string "" "wlan_length=$length"
    json_select ..
  }
  create_own_rrm_nr_list

  json_select ..

  json_close_object
  procd_close_data

  local all_rrm_nr_length
  all_rrm_nr_length=$(echo "$all_rrm_nr" | grep -o ", \[" | wc -l)
  logger -t "${NAME}" -pdaemon.info "Broadcasted Wi-Fi interfaces[$all_rrm_nr_length] with enabled 802.11k NR: [${all_rrm_nr:1} ]"
}

start_service() {
  abort_when_no_enabled_wifi_interfaces
  wait_until_all_enabled_wifi_interfaces_are_up

  procd_open_instance
  procd_set_param command /bin/sh "/usr/bin/$NAME"
  custom_procd_add_mdns
  procd_close_instance

  /etc/init.d/umdns restart
}

service_triggers() {
  procd_add_reload_trigger wireless
}
